#1 - connect函数将激发TCP的“三次握手机制”，此函数仅在成功建立连接和建立连接失败是才返回
	1）如果被连接端没有应答主动侧的SYN，那么主动侧(内核TCP协议栈)等待6s后会再发一个SYN，如果依旧没应答，那么24s后会再发送一个，如果一共等待了
	   75s后，还是没有应答，那么connect返回ETIMEDOUT。
		（注意：这里监听端的端口已经启动监听了，而且可以被主动链接了，但是在收到SYN后就是不回ACK，这可能是因为对端资源不够用了）
	2）如果对主动侧SYN的应答是RST，则表示被链接端没有建立监听端口，比如可能程序没有跑起来，收到RST后，connect返回ECONNREFUSED
		（有三种情况会产生RST包:目的端口不可用;TCP想取消一个链接;TCP收到一个根本不存在连接上的包）
------------------------------------------------------------------------------------------------------------------------------------------------

#2 - bind函数常见的返回错误是EADDRINUSE，后面讨论SO_REUSEADDR和SO_REUSEPORT的时候将详细说明

------------------------------------------------------------------------------------------------------------------------------------------------

#3 - listen函数把当前的套接字转换状态为“被动监听”，同时在第二个参数中指定“队列”的最大长度。
	“队列”：内核为每一个“套接字”维护两个队列————“未完成队列”和“已完成队列”(这也从侧面说明，每个套接字可以有N多个客户端链接)
	“未完成队列":未完成三次握手的链接都在这个队列中
	“已完成队列”:已经完成三次握手的链接都在这个队列中
	来自客户端的SYN到达时，TCP在未完成队列中创建一个条目，直到完成三次握手后，这一个条目将会被移动到已完成队列的队列尾部。
		
		(注意！！！当程序调用accept的时候，TCP从已完成队列的“队列头”中拿出一个条目给应用程序。)
		(如果accept的时候，已完成队列是空的，那么accept将阻塞睡眠(阻塞模式)，或者出错返回(非阻塞模式))
		(当已完成队列中有新条目的时候，TCP将会唤醒accept函数，让其从队列中取条目来处理)
	
	内核对于第二个参数的解释：内核能为某个套接字排队的最大“已完成”队列的条目数，即accept函数等待的队列最大长度
	从这里可以看出，accept处理的线性特点(从队列头中取)，这里可能是非并发的，因此，可以多线程accept来提高处理效率。
	

	backlog的上限由内核决定，因此对于高访问量的服务而言，调整内核中的TCP模块参数是相当有必要的

	如果“未完成队列”满了(三路握手建立的速度赶不上建链请求的速度，大量未完成三路握手的链接残留在未完成队列中)，那么TCP什么事情都不做，当做没事
	发生，这也隐喻了“由客户端在此发送SYN”来触发再次入队，即使用内建的超时重传机制来自行调整

	 SNY flood导致的dos  ：  疯狂发送匿名ip的SYN请求给服务端，以塞满“未完成队列”

------------------------------------------------------------------------------------------------------------------------------------------------

#4 - accept函数由TCP服务端调用，用于从已完成队列的队列头返回下一个已完成三次握手的链接。如果队列为空，那么阻塞或者报错返回
	accept函数的后两个参数为NULL的话，那么表示服务端对客户端的身份不感兴趣

------------------------------------------------------------------------------------------------------------------------------------------------

#5 - fork和exec

------------------------------------------------------------------------------------------------------------------------------------------------

#6 - 并发服务器
	(*)
	套接字(IP+PORT)可以理解为文件(不是文件描述符)，那么通过socket函数获得的就是套接字描述符，那么如果有两个进程都打开了一个套接字(IP+PORT)，那么
	按照类比文件的文件引用计数，套接字也有套接字引用计数，如果一个进程关闭了自己的套接字描述符，那么会导致引用计数-1，当且仅当计数为0时，这个套接字
	才会释放。因此可以理解文，每个进程只是把自己的“描述符”关闭了，不会影响别的进程使用这个套接字。
		
		(*)注意！！！  套接字 可类比 为文件，  socket返回的是套接字描述符，可类比为文件描述符

	因此，accept返回的时候，如果使用fork机制，任何一方关闭监听套接字和已连接套接字，都不会影响对方，因为两个进程各自管理的只是自己的描述符，公共资源
	“套接字”是系统级别的，内核级别的，不会受到互相的影响。  (这个在C1.c和S1.c中进行验证)

------------------------------------------------------------------------------------------------------------------------------------------------

#7 - close函数和关闭文件描述符一样，这里的close函数产生的效果就是把套接字描述符关闭，并不会触发FIN分段的发送，仅仅是把套接字的引用计数-1(类比文件描述符)，
     “因此不会触发四次挥手”，所以，两个进程同时监听一个IP+PORT,任何一个关闭，都不会影响对方，父子通过fork的模式同理。

     如果确确实实想“触发四次挥手”，那么可以使用shutdown函数来实现。









			
			

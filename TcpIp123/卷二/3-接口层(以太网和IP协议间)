#1  ==========================================================================================
接口层在协议栈的最底部，以interface为表示。
由发送和接收分组的硬件和软件构成。

接口层向下对接驱动程序，向上对接IP层。

（*）接口层为 驱动程序提供一套接口，让驱动程序去实现。这是一个抽象层，由内核定义接口模板，由驱动程序
负责实现。

（*）可以理解为接口层是内核为了统一各个厂家不同硬件，而自行定义的一套编程接口，内核使用这些接口
参与内核的实现，而不关心各个硬件厂家如何来实现这些接口。

接口层按照软件内容可分为两块：
1）一套开放给驱动程序的标准接口
2）使用这套标准接口的逻辑软件

接口层的软件逻辑为：接口层不提供“可靠”的分组传输，只提供“最快”的分组传输。可靠性由上层负责。


#2  ==========================================================================================
每个网络设备都有一个ifnet接口，用来存储这个设备在内核中持有的信息。

每个ifnet都包含一个列表，这个列表中有协议地址链表(ip地址),链表的每个节点对应一个ifaddr结构，
每个结构对应一个ip地址。

我们通过ifconfig可以查看网络设备对应的接口的信息，而这些接口又对应多个ip地址

网卡---ifnet----ifaddr1(ip1)
	     |--ifaddr2(ip2)
	     |--ifaddr3(ip3)
ps:每个ifaddr都有一个回指ifnet的指针


#3  ==========================================================================================

每个ifnet都有成员 if_flags , 用来表明接口的操作状态和属性，有如下取值：

IFF_BROADCAST    可用于广播
IFF_MULTICAST	 可用于多播
IFF_POINTOPOINT	 可用于点对点网络
IFF_LOOPBACK	 可用于环回
IFF_OACTIVE	 正在传输数据
IFF_RUNNING	 资源已分配给这个接口
IFF_SIMPLEX	 接口不能接受他自己发送的数据
IFF_LINK0	 驱动程序自定义
IFF_LINK1	 同上
IFF_LINK2	 同上
IFF_ALLMULTI	 接口正接收所有多播分组
IFF_DEBUG	 接口允许调试
IFF_NOARP	 此接口不使用ARP协议
IFF_NOTRAILERS	 不使用尾部封装
IFF_PROMISC	 接收所有网络分组
IFF_UP		 工作中

如上所有标志位都是可读的，可以用用户态程序访问if_flags，从而实现和ifconfig一样的功能。
但是上述标志不是全都可写，某些标志位的置位要求在内核态下进行。

#4  ==========================================================================================
BSD分组过滤器

#1  ==========================================================================================
#1  ==========================================================================================
#1  ==========================================================================================
#1  ==========================================================================================
#1  ==========================================================================================
#1  ==========================================================================================
#1  ==========================================================================================
#1  ==========================================================================================
#1  ==========================================================================================
